name: Build Executables

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build Windows executable
        run: pyinstaller --onefile main.py --add-data "C:\\hostedtoolcache\\windows\\Python\\3.9.13\\x64\\Lib\\site-packages\\emoji\\unicode_codes\\emoji.json;emoji/unicode_codes"

      - name: Generate release tag for Windows
        id: tag-windows
        run: |
          echo "::set-output name=release_tag::Windows_$(date +"%Y.%m.%d_%H-%M")"

      - name: Create Release Tag for Windows
        shell: pwsh
        run: |
          $version = "${{ steps.tag-windows.outputs.release_tag }}"
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git tag $version
          git push origin $version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag-windows.outputs.release_tag }}
          files: dist/main.exe

  build-linux:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Locate emoji.json
        id: locate-emoji
        run: |
          echo "Finding emoji.json path..."
          EMOJI_JSON_PATH=$(python -c "import os; import emoji; print(os.path.join(emoji.__path__[0], 'unicode_codes', 'emoji.json'))")
          echo "Found emoji.json at: $EMOJI_JSON_PATH"
          echo "emoji_json_path=$EMOJI_JSON_PATH" >> $GITHUB_ENV

      - name: Build Linux executable
        run: |
          pyinstaller --onefile main.py --add-data "${{ env.emoji_json_path }}:emoji/unicode_codes"

      - name: Generate release tag for Linux
        id: tag-linux
        run: |
          echo "release_tag=Linux_$(date +"%Y.%m.%d_%H-%M")" >> $GITHUB_ENV

      - name: Create Release Tag for Linux
        shell: bash
        run: |
          version=${{ env.release_tag }}
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git tag $version
          git push origin $version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          files: dist/main

  build-mac:
    runs-on: macos-latest  # Use a macOS runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Locate emoji.json
        id: locate-emoji
        run: |
          echo "Finding emoji.json path..."
          EMOJI_JSON_PATH=$(python -c "import os; import emoji; print(os.path.join(emoji.__path__[0], 'unicode_codes', 'emoji.json'))")
          echo "Found emoji.json at: $EMOJI_JSON_PATH"
          echo "emoji_json_path=$EMOJI_JSON_PATH" >> $GITHUB_ENV

      - name: Build Linux executable
        run: |
          pyinstaller --onefile main.py --add-data "${{ env.emoji_json_path }}:emoji/unicode_codes"

      - name: Generate release tag for macOS
        id: tag-mac
        run: |
          echo "::set-output name=release_tag::macOS_$(date +"%Y.%m.%d_%H-%M")"

      - name: Create Release Tag for macOS
        shell: bash
        run: |
          version=${{ steps.tag-mac.outputs.release_tag }}
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git tag $version
          git push origin $version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag-mac.outputs.release_tag }}
          files: dist/main